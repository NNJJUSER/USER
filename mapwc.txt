driver



import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class driver_class {

	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
			Configuration c=new Configuration();
			@SuppressWarnings("deprecation")
			Job job=new Job(c,"WordCount");
			job.setJarByClass(driver_class.class);
			job.setMapperClass(mapper_class.class);
			job.setReducerClass(reducer_class.class);
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(IntWritable.class);
			
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);

	}
}

reducer

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
public class reducer_class extends Reducer <Text,IntWritable,Text,IntWritable> {
	public void reduce(Text word,Iterable <IntWritable> values,Context con) throws IOException,InterruptedException{
		int sum=0;
		for(IntWritable value: values) {
			sum=+value.get();
		}
		con.write(word, new IntWritable(sum));
	}

}

mapper 

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class mapper_class extends Mapper <LongWritable,Text,Text,IntWritable> {
	public void map(LongWritable offset,Text key,Context con)throws IOException,InterruptedException{
		String line =key.toString();
		String[] words=line.split(" ");
		for(String word: words) {
			Text outputKey=new Text(word);
			IntWritable outputValue=new IntWritable(1);
			con.write(outputKey, outputValue);
		}
	}

}